import pygame 
import random

# Initialize pygame
pygame.init()

# Screen setup
WIDTH, HEIGHT = 600, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Brick Breaker")

# Color definitions
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)  
BLUE = (0, 0, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

# Paddle and Ball setup
PADDLE_WIDTH = 100
PADDLE_HEIGHT = 10
paddle_x = (WIDTH - PADDLE_WIDTH) // 2
paddle_y = HEIGHT - 50
paddle_speed = 7

BALL_RADIUS = 8 
ball_x = WIDTH // 2
ball_y = HEIGHT // 2
ball_dx = random.choice([-4, 4])
ball_dy = -4

# Bricks setup
BRICK_ROWS = 5
BRICK_COLS = 8
BRICK_WIDTH = WIDTH // BRICK_COLS - 5
BRICK_HEIGHT = 20
bricks = []
for row in range(BRICK_ROWS):
    for col in range(BRICK_COLS):
        bricks.append(pygame.Rect(col * (BRICK_WIDTH + 5) + 5, row * (BRICK_HEIGHT * 5) + 5, BRICK_WIDTH, BRICK_HEIGHT))

# Main game loop
running = True
while running:
    screen.fill(BLACK)  # Clears the screen and fills it with black color

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Paddle movement
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and paddle_x > 0:
        paddle_x -= paddle_speed
    if keys[pygame.K_RIGHT] and paddle_x < WIDTH - PADDLE_WIDTH:
        paddle_x += paddle_speed

    # Ball movement
    ball_x += ball_dx
    ball_y += ball_dy

    # Ball collision with screen borders
    if ball_x - BALL_RADIUS <= 0 or ball_x + BALL_RADIUS >= WIDTH:
        ball_dx *= -1
    if ball_y - BALL_RADIUS <= 0:
        ball_dy *= -1

    # Ball collision with paddle
    paddle_rect = pygame.Rect(paddle_x, paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT)
    if paddle_rect.collidepoint(ball_x, ball_y + BALL_RADIUS):
        ball_dy *= -1

    # Ball collision with bricks
    for brick in bricks[:]:
        if brick.collidepoint(ball_x, ball_y - BALL_RADIUS) or brick.collidepoint(ball_x, ball_y + BALL_RADIUS):
            ball_dy *= -1 
            bricks.remove(brick)
            break

    # Game Over if ball falls below the screen
    if ball_y + BALL_RADIUS >= HEIGHT:
        running = False

    # Draw paddle, ball, and bricks
    pygame.draw.rect(screen, BLUE, (paddle_x, paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT))
    pygame.draw.circle(screen, RED, (ball_x, ball_y), BALL_RADIUS)
    for brick in bricks: 
        pygame.draw.rect(screen, GREEN, brick)

    # Update the display
    pygame.display.flip()

    # Delay to control the frame rate
    pygame.time.delay(20)

# Quit pygame
pygame.quit()
